import React from "react";
import { Card, Col, Icon, Row } from "antd";
import styled from "styled-components";
import BigContainer from "./BigContainer";

const MyIcon = Icon.createFromIconfontCN({
  scriptUrl: "//at.alicdn.com/t/font_838122_vx82b0yre5.js", // generated by iconfont.cn
});

function Iconfont(props: { type: string }) {
  return <MyIcon type={props.type} style={{marginRight: "8px"}}/>;
}

interface Feature {
  icon: string;
  title: string;
  description: string;
}

const features = [
  {
    icon: "icon-Artboard",
    title: "多层次资产配置",
    description: "以经典Markowitz模型为依托，同时考虑风险收益，双管齐下；后续针对各市场特点继续优化，每种标的仔细考量，精心推荐。双重保障，层层递进，呈现更完美投资选择。",
  },
  {
    icon: "icon-fengxian3",
    title: "基于量化择时的风险控制",
    description: "采用短线择时模型监控“优质股”，在过滤价格序列的噪声与长期趋势后，通过希尔伯特变换与傅立叶变换获得相位指标，抓住收益率拐点，获得稳健收益。",
  },
  {
    icon: "icon-rengongzhineng",
    title: "用于预测的机器学习（LSTM）",
    description: "采用人工智能深度学习模型，运用前沿的LSTM长短期记忆神经网络，相比传统的时间序列预测模型，更精确高效地预测股票期权走势。",
  },
  {
    icon: "icon-api",
    title: "基于花旗API的数据挖掘",
    description: "采用数据挖掘，发掘用户存于花旗银行API的有价值数据。考虑外生变量，生成优化后的集成变量。参考行业管理文件，生成优化指标，有效体现用户风险收益偏好。",
  }, {
    icon: "icon-juleimoban",
    title: "基于聚类算法的智能推荐",
    description: "聚类风险投资偏好相同的用户，精确推荐。采用可分布式计算的Kmeans++聚类算法，从容应对大数据。LOF算法剔除离群点，优化聚类结果。聚类中心自调整，模型自优化，使得我们的推荐越发精准。",
  },
  {
    icon: "icon-moxing1",
    title: "DCC-MIDAS模型的应用",
    description: "利用DCC-MIDAS模型估计商品市场中原油期货与现货的动态关联关系，其中GARCH模型的波动成分代替传统DCC模型中的固定成分，可以动态刻画两个市场之间的相关性并提高估计的有效性和消除估计的有偏性。",
  }, {
    icon: "icon-zhengcejiedu",
    title: "经济政策不确定性因子（EPU）",
    description: "引入经济政策不确定性指数，定量刻画A股与商品市场受政策影响程度，对市场走势进行更为精准的预测。",
  },
  {
    icon: "icon-yuanyou2",
    title: "INE原油期货",
    description: "NE原油期货采用人民币计价，面对亚洲市场，同时采用中质含硫原油，全有原品产量的45%,其应用范围更为广泛。",
  },

] as Feature[];

function CardFeature(props: { feature: Feature }) {
  const {icon, title, description} = props.feature;
  return <Card title={<span><Iconfont type={icon}/>{title}</span>}
               style={{height: "220px"}}
  >
    {/*<h4>{x.title}</h4>*/}
    <span>{description}</span>
  </Card>;
}

const FeatureContainer = styled.div`
  height: 220px;
  svg {
    width: 48px;
    height: 48px;
  }
  
  h3 {
    padding: 8px;
  }
 
  
  padding: 16px;
  
  //:hover {
  //  transform: scale(1.05);
  //  border: 1px solid #019BF0;
  //  cursor: initial;
  //  //background: #019BF0;
  //  //color: #ECECEC;
  //}
  //
  //transition: all 0.3s ease-in-out;
`;

function StandardFeature(props: { feature: Feature }) {
  const {icon, title, description} = props.feature;
  return <FeatureContainer>
    <div style={{textAlign: "center"}}>
      <MyIcon type={icon}/>
      <h3>{title}</h3>
      {/*<div style={{ textAlign: "left" }}>*/}
        <small>{description}</small>
      {/*</div>*/}
    </div>
  </FeatureContainer>;
}

interface Props {

}

export default function Features(props: Props) {
  return <div style={{paddingTop: "20px", paddingBottom: "40px", backgroundColor: "#ffffff"}}>
  <BigContainer title={"系统特性"}>
    <Row style={{maxWidth: "1500px", marginLeft: "auto", marginRight: "auto"}}>
      {features.map((x, i) => (
        <Col xs={24} sm={12} md={8} xl={6} key={i}>
          <StandardFeature feature={x}/>
        </Col>
      ))
      }
    </Row>
  </BigContainer></div>;
}
